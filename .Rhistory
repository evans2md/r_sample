obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
ffmq = obs+desc+aware+njudge+nreact
print(mean(ffmq[1:100,]),mean(ffmq[101:200,]))
mean(ffmq[1:100,]),mean(ffmq[101:200,])
mean(ffmq[1:100,]);mean(ffmq[101:200,])
obs<-obs-1
obs<-minMax(obs)
njudge[1:100,]<-njudge[1:100,]+1
njudge<-minMax(njudge)
nreact[1:100,]<-nreact[1:100,]+1
nreact<-minMax(nreact)
aware[101:200,]<-aware[101:200,]+1
aware<-minMax(aware)
desc[101:200,]<-desc[101:200,]+1
desc<-minMax(desc)
ffmq = obs+desc+aware+njudge+nreact
mean(ffmq[1:100,]);mean(ffmq[101:200,])
ffmq
# generate factor item responses
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
obs
obs<-obs-1
obs<-minMax(obs)
njudge[1:100,]<-njudge[1:100,]+1
njudge<-minMax(njudge)
nreact[1:100,]<-nreact[1:100,]+1
nreact<-minMax(nreact)
aware[101:200,]<-aware[101:200,]+1
aware<-minMax(aware)
desc[101:200,]<-desc[101:200,]+1
desc<-minMax(desc)
obs
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
ffmq = obs+desc+aware+njudge+nreact
obs[obs>0]
njudge[njudge>0][1:100,]
njudge[1:100,]>0
njudge[njudge[1:100,]>0]
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
njudge
njudge[njudge[1:100,]>0]<-njudge[njudge[1:100,]>0]+1
njudge<-minMax(njudge)
njudge
njudge <- gen_factor_data(nj_items)
m = njudge
m
m[m[1:100,]>0]
m
filter(m>0)
filter(as.data.frame(m)>0)
as.data.frame(m)
m <- as.data.frame(m)
filter(m>0)
m$three
m
m<-njudge
m
m
m[m>0,1:100,]
m[m>0,1:100]
m[m>0]
which(m[1:100,]>0)
a = which(m[1:100,]>0)
m[a,]+1
a = a[which(m[1:100,]>0)]
a
m[a,]
a = which(m[1:100]>1)
a
m
m[which(m[1:100,]>0),]
m[which(m[1:100,]>0)]
m[m[1:100,]>0]
m[m[1:100,]>1]
m[m[1:100,]>2]
m[m[1:100,]>3]
m[m[1:100,]>4]
removeItems <- function(m,factor_items){
m_vec <- to_vec(for(i in 1:39) # create vector for item placement,
if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA
for (ii in 1:length(m_vec)){ # go through binary vector representing factor items
m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is
}
return(m)
}
desc<-removeItems(desc,desc_items)
## survey data
# first survey is five facet mindfulness questionnaire, 39 items w 5 factors
# we hypothesized that treatment (group1) would score higher than control (group2), so we'll set anchors for those as well.
# item responses range 1-5
m_ffmq_g1 <- 3.5 # mean ffmq score for group1
sd_ffmq_g1 <- 1 # sd ffmq score, group1
m_ffmq_g2 <- 2.5
sd_ffmq_g2 <- 1
# we'll generate data such that a factor analysis should reveal the factors by setting different anchors for each factor, and generative values for associated questions from those anchors
# factor: factor_name(factor_items)
# factor1: observing (1, 6, 11, 15, 20, 26, 31, 36)
obs_items = c(1,6,11,15,20,26,31,36) # we'll use later when generating data matrices
# factor2: describing (2, 7, 12R, 16R, 22R, 27, 32, 37) R = reverse scoring, can subtract upper limit to score (e.g 6; response:1, score:6-1=5)
desc_items = c(2,7,12,16,22,27,32,37)
# factor3: awareness (5R, 8R, 13R, 18R, 23R, 28R, 34R, 38R)
aware_items = c(5,8,13,18,23,28,34,38)
# factor4: nonjudging (3R, 10R, 14R, 17R, 25R, 30R, 35R, 39R)
nj_items = c(3,10,14,17,25,30,35,39)
# factor5: nonreactivity (4, 9, 19, 21, 24, 29, 33)
nr_items = c(4,9,19,21,24,29,33)
# preallocate matrix for score
ffmq <- matrix(data=NA,nrow=n,ncol=39) # 39 survey items
minMax <- function(m,floor=1,ceiling=5){
# function to set floor and ceiling values in a matrix
m[m<floor]<-floor # set any values less than floor to floor
m[m>ceiling]<-ceiling # same for ceiling
return(m)
}
removeItems <- function(m,factor_items){
# function to remove non-factor items from matrix
m_vec <- to_vec(for(i in 1:39) # create vector for item placement,
if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA
for (ii in 1:length(m_vec)){ # go through binary vector representing factor items
m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is
}
return(m)
}
gen_factor_data <-function(factor_items,print_plot=FALSE){
# function to generate ffmq factor data
# input: factor indicies
# output: 200x39 matrix of factor item responses (non-factor filled w 0s)
#   rows 1:100: group1
#   rows 101:200: group2
m <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1), # generate mean factor score for group1
rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # and group2
m = matrix(rnorm(39*n,m,1),n,39) # generate matrix using random means (static per participant)
# using this method, we'll get some float values instead of integer
mode(m)<-'integer' # set internal storage mode to integer (truncates)
# we'll also run into values outside our range of 1-5
m<-minMax(m)
# get rid of non-factor columns
m<-removeItems(m,factor_items)
# good time to print some histograms to make sure distribution is as-expects
if(print_plot==TRUE){
hist(m[1:100,]) # first 100 rows e.g group1
abline(v=m_ffmq_g1,col='red') # plot group1 population mean
hist(obs[101:200,])# group2
abline(v=m_ffmq_g2,col='red')
}
# my sample is slightly lower than defined means - due to changing data type to int instead of rounding, but overall looks good!
# remove non-factor items
return(m)
}
# generate factor item responses
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
ffmq = obs+desc+aware+njudge+nreact
# as is, all factors have the same means since they were generated w same population values
# let's assume some variability between factors, and for fun, say that the treatment
# works particularly well for non-judgement and non-react
obs<-obs-1
obs<-minMax(obs)
obs<-removeItems(obs,obs_items)
njudge[njudge[1:100,]>0]<-njudge[njudge[1:100,]>0]+1
njudge<-minMax(njudge)
njudge<-removeItems(njudge,nj_items)
nreact[1:100,]<-nreact[1:100,]+1
nreact<-minMax(nreact)
nreact<-removeItems(nreact,nr_items)
aware[101:200,]<-aware[101:200,]+1
aware<-minMax(aware)
aware<-removeItems(aware,aware_items)
desc[101:200,]<-desc[101:200,]+1
desc<-minMax(desc)
desc<-removeItems(desc,desc_items)
desc <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1),rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # repeat for remaining factors
desc_vec <- to_vec(for(i in 1:39)
if(i %in% desc_items) 1 else 0)
aware <-c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1),rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2))
aware_vec<- to_vec(for(i in 1:39)
if(i %in% aware_items) 1 else 0)
njudge <-c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1),rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2))
njudge_vec <-to_vec(for(i in 1:39)
if(i %in% nj_items) 1 else 0)
nreact <-c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1),rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2))
nreact_vec <- to_vec(for(i in 1:39)
if(i %in% nr_items) 1 else 0)
# check vectors sum to total questionnaire
if (sum(obs_vec+desc_vec+aware_vec+njudge_vec+nreact_vec)!=39){
print('check ffmq vector assignment!')} # only inform if issue, otherwise chug along
ffmq
# we can construct anchors for each factor by sampling from our group means
obs
ffmq2 = obs+desc+aware+njudge+nreact
mean(ffmq[1:100,])
mean(ffmq2[1:100,])
ffmq
ffmq2
obs
njudge
nreact
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
nreact
nreact[1:100,]<-nreact[1:100,]+1
nreact
nreact<-minMax(nreact)
nreact
nreact<-removeItems(nreact,nr_items)
nreact
## survey data
# first survey is five facet mindfulness questionnaire, 39 items w 5 factors
# we hypothesized that treatment (group1) would score higher than control (group2), so we'll set anchors for those as well.
# item responses range 1-5
m_ffmq_g1 <- 3.5 # mean ffmq score for group1
sd_ffmq_g1 <- 1 # sd ffmq score, group1
m_ffmq_g2 <- 2.5
sd_ffmq_g2 <- 1
# we'll generate data such that a factor analysis should reveal the factors by setting different anchors for each factor, and generative values for associated questions from those anchors
# factor: factor_name(factor_items)
# factor1: observing (1, 6, 11, 15, 20, 26, 31, 36)
obs_items = c(1,6,11,15,20,26,31,36) # we'll use later when generating data matrices
# factor2: describing (2, 7, 12R, 16R, 22R, 27, 32, 37) R = reverse scoring, can subtract upper limit to score (e.g 6; response:1, score:6-1=5)
desc_items = c(2,7,12,16,22,27,32,37)
# factor3: awareness (5R, 8R, 13R, 18R, 23R, 28R, 34R, 38R)
aware_items = c(5,8,13,18,23,28,34,38)
# factor4: nonjudging (3R, 10R, 14R, 17R, 25R, 30R, 35R, 39R)
nj_items = c(3,10,14,17,25,30,35,39)
# factor5: nonreactivity (4, 9, 19, 21, 24, 29, 33)
nr_items = c(4,9,19,21,24,29,33)
# preallocate matrix for score
ffmq <- matrix(data=NA,nrow=n,ncol=39) # 39 survey items
minMax <- function(m,floor=1,ceiling=5){
# function to set floor and ceiling values in a matrix
m[m<floor]<-floor # set any values less than floor to floor
m[m>ceiling]<-ceiling # same for ceiling
return(m)
}
removeItems <- function(m,factor_items){
# function to remove non-factor items from matrix
m_vec <- to_vec(for(i in 1:39) # create vector for item placement,
if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA
for (ii in 1:length(m_vec)){ # go through binary vector representing factor items
m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is
}
return(m)
}
gen_factor_data <-function(factor_items,print_plot=FALSE){
# function to generate ffmq factor data
# input: factor indicies
# output: 200x39 matrix of factor item responses (non-factor filled w 0s)
#   rows 1:100: group1
#   rows 101:200: group2
m <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1), # generate mean factor score for group1
rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # and group2
m = matrix(rnorm(39*n,m,1),n,39) # generate matrix using random means (static per participant)
# using this method, we'll get some float values instead of integer
mode(m)<-'integer' # set internal storage mode to integer (truncates)
# we'll also run into values outside our range of 1-5
m<-minMax(m)
# get rid of non-factor columns
m<-removeItems(m,factor_items)
# good time to print some histograms to make sure distribution is as-expects
if(print_plot==TRUE){
hist(m[1:100,]) # first 100 rows e.g group1
abline(v=m_ffmq_g1,col='red') # plot group1 population mean
hist(obs[101:200,])# group2
abline(v=m_ffmq_g2,col='red')
}
# my sample is slightly lower than defined means - due to changing data type to int instead of rounding, but overall looks good!
# remove non-factor items
return(m)
}
# generate factor item responses
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
ffmq = obs+desc+aware+njudge+nreact
# as is, all factors have the same means since they were generated w same population values
# let's assume some variability between factors, and for fun, say that the treatment
# works particularly well for non-judgement and non-react
obs<-obs-1
obs<-minMax(obs)
obs<-removeItems(obs,obs_items)
njudge[njudge[1:100,]>0]<-njudge[njudge[1:100,]>0]+1
njudge<-minMax(njudge)
njudge<-removeItems(njudge,nj_items)
nreact[1:100,]<-nreact[1:100,]+1
nreact<-minMax(nreact)
nreact<-removeItems(nreact,nr_items)
aware[101:200,]<-aware[101:200,]+1
aware<-minMax(aware)
aware<-removeItems(aware,aware_items)
desc[101:200,]<-desc[101:200,]+1
desc<-minMax(desc)
desc<-removeItems(desc,desc_items)
ffmq
# we can construct anchors for each factor by sampling from our group means
ffmq2=obs+desc+aware+njudge+nreact
ffmq2
mean(ffmq[1:100,])
mean(ffmq2[1:100,])
mean(ffmq[101:200,])
mean(ffmq2[101:200,])
njudge<-removeItems(njudge,nj_items)
## survey data
# first survey is five facet mindfulness questionnaire, 39 items w 5 factors
# we hypothesized that treatment (group1) would score higher than control (group2), so we'll set anchors for those as well.
# item responses range 1-5
m_ffmq_g1 <- 3.5 # mean ffmq score for group1
sd_ffmq_g1 <- 1 # sd ffmq score, group1
m_ffmq_g2 <- 2.5
sd_ffmq_g2 <- 1
# we'll generate data such that a factor analysis should reveal the factors by setting different anchors for each factor, and generative values for associated questions from those anchors
# factor: factor_name(factor_items)
# factor1: observing (1, 6, 11, 15, 20, 26, 31, 36)
obs_items = c(1,6,11,15,20,26,31,36) # we'll use later when generating data matrices
# factor2: describing (2, 7, 12R, 16R, 22R, 27, 32, 37) R = reverse scoring, can subtract upper limit to score (e.g 6; response:1, score:6-1=5)
desc_items = c(2,7,12,16,22,27,32,37)
# factor3: awareness (5R, 8R, 13R, 18R, 23R, 28R, 34R, 38R)
aware_items = c(5,8,13,18,23,28,34,38)
# factor4: nonjudging (3R, 10R, 14R, 17R, 25R, 30R, 35R, 39R)
nj_items = c(3,10,14,17,25,30,35,39)
# factor5: nonreactivity (4, 9, 19, 21, 24, 29, 33)
nr_items = c(4,9,19,21,24,29,33)
# preallocate matrix for score
ffmq <- matrix(data=NA,nrow=n,ncol=39) # 39 survey items
minMax <- function(m,floor=1,ceiling=5){
# function to set floor and ceiling values in a matrix
m[m<floor]<-floor # set any values less than floor to floor
m[m>ceiling]<-ceiling # same for ceiling
return(m)
}
removeItems <- function(m,factor_items){
# function to remove non-factor items from matrix
m_vec <- to_vec(for(i in 1:39) # create vector for item placement,
if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA
for (ii in 1:length(m_vec)){ # go through binary vector representing factor items
m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is
}
return(m)
}
gen_factor_data <-function(factor_items,print_plot=FALSE){
# function to generate ffmq factor data
# input: factor indicies
# output: 200x39 matrix of factor item responses (non-factor filled w 0s)
#   rows 1:100: group1
#   rows 101:200: group2
m <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1), # generate mean factor score for group1
rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # and group2
m = matrix(rnorm(39*n,m,1),n,39) # generate matrix using random means (static per participant)
# using this method, we'll get some float values instead of integer
mode(m)<-'integer' # set internal storage mode to integer (truncates)
# we'll also run into values outside our range of 1-5
m<-minMax(m)
# get rid of non-factor columns
m<-removeItems(m,factor_items)
# good time to print some histograms to make sure distribution is as-expects
if(print_plot==TRUE){
hist(m[1:100,]) # first 100 rows e.g group1
abline(v=m_ffmq_g1,col='red') # plot group1 population mean
hist(obs[101:200,])# group2
abline(v=m_ffmq_g2,col='red')
}
# my sample is slightly lower than defined means - due to changing data type to int instead of rounding, but overall looks good!
# remove non-factor items
return(m)
}
# generate factor item responses
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
ffmq = obs+desc+aware+njudge+nreact
# as is, all factors have the same means since they were generated w same population values
# let's assume some variability between factors, and for fun, say that the treatment
# works particularly well for non-judgement and non-react
obs<-obs-1
obs<-minMax(obs)
obs<-removeItems(obs,obs_items)
njudge[1:100,]<-njudge[1:100,]+1
njudge<-minMax(njudge)
njudge<-removeItems(njudge,nj_items)
nreact[1:100,]<-nreact[1:100,]+1
nreact<-minMax(nreact)
nreact<-removeItems(nreact,nr_items)
aware[101:200,]<-aware[101:200,]+1
aware<-minMax(aware)
aware<-removeItems(aware,aware_items)
desc[101:200,]<-desc[101:200,]+1
desc<-minMax(desc)
desc<-removeItems(desc,desc_items)
ffmq
# we can construct anchors for each factor by sampling from our group means
mean(aware[1:100,])
mean(aware[101:200,])
mean(ffmq[1:100,])
mean(ffmq[101:200,])
ffmq = data.frame(obs+desc+aware+njudge+nreact)
ffmq
gen_factor_data(obs_items,print_plot=TRUE)
## survey data
# first survey is five facet mindfulness questionnaire, 39 items w 5 factors
# we hypothesized that treatment (group1) would score higher than control (group2), so we'll set anchors for those as well.
# item responses range 1-5
m_ffmq_g1 <- 3.5 # mean ffmq score for group1
sd_ffmq_g1 <- 1 # sd ffmq score, group1
m_ffmq_g2 <- 2.5
sd_ffmq_g2 <- 1
# we'll generate data such that a factor analysis should reveal the factors by setting different anchors for each factor, and generative values for associated questions from those anchors
# factor: factor_name(factor_items)
# factor1: observing (1, 6, 11, 15, 20, 26, 31, 36)
obs_items = c(1,6,11,15,20,26,31,36) # we'll use later when generating data matrices
# factor2: describing (2, 7, 12R, 16R, 22R, 27, 32, 37) R = reverse scoring, can subtract upper limit to score (e.g 6; response:1, score:6-1=5)
desc_items = c(2,7,12,16,22,27,32,37)
# factor3: awareness (5R, 8R, 13R, 18R, 23R, 28R, 34R, 38R)
aware_items = c(5,8,13,18,23,28,34,38)
# factor4: nonjudging (3R, 10R, 14R, 17R, 25R, 30R, 35R, 39R)
nj_items = c(3,10,14,17,25,30,35,39)
# factor5: nonreactivity (4, 9, 19, 21, 24, 29, 33)
nr_items = c(4,9,19,21,24,29,33)
# preallocate matrix for score
ffmq <- matrix(data=NA,nrow=n,ncol=39) # 39 survey items
minMax <- function(m,floor=1,ceiling=5){
# function to set floor and ceiling values in a matrix
m[m<floor]<-floor # set any values less than floor to floor
m[m>ceiling]<-ceiling # same for ceiling
return(m)
}
removeItems <- function(m,factor_items){
# function to remove non-factor items from matrix
m_vec <- to_vec(for(i in 1:39) # create vector for item placement,
if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA
for (ii in 1:length(m_vec)){ # go through binary vector representing factor items
m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is
}
return(m)
}
gen_factor_data <-function(factor_items,print_plot=FALSE){
# function to generate ffmq factor data
# input: factor indicies
# output: 200x39 matrix of factor item responses (non-factor filled w 0s)
#   rows 1:100: group1
#   rows 101:200: group2
m <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1), # generate mean factor score for group1
rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # and group2
m = matrix(rnorm(39*n,m,1),n,39) # generate matrix using random means (static per participant)
# using this method, we'll get some float values instead of integer
mode(m)<-'integer' # set internal storage mode to integer (truncates)
# we'll also run into values outside our range of 1-5
m<-minMax(m)
# good time to print some histograms to make sure distribution is as-expects
if(print_plot==TRUE){
hist(m[1:100,]) # first 100 rows e.g group1
abline(v=m_ffmq_g1,col='red') # plot group1 population mean
hist(obs[101:200,])# group2
abline(v=m_ffmq_g2,col='red')
}
# get rid of non-factor columns
m<-removeItems(m,factor_items)
# my sample is slightly lower than defined means - due to changing data type to int instead of rounding, but overall looks good!
# remove non-factor items
return(m)
}
# generate factor item responses
obs <- gen_factor_data(obs_items)
desc <- gen_factor_data(desc_items)
aware <- gen_factor_data(aware_items)
njudge <- gen_factor_data(nj_items)
nreact <- gen_factor_data(nr_items)
# as is, all factors have the same means since they were generated w same population values
# let's assume some variability between factors, and for fun, say that the treatment
# works particularly well for non-judgement and non-react
obs<-obs-1 # lower all obs scores by 1
obs<-minMax(obs) # reset floor/ceiling
obs<-removeItems(obs,obs_items) # 1 added to 0 values, remove non-factor columns
njudge[1:100,]<-njudge[1:100,]+1 # increase treatment group non-judge by 1
njudge<-minMax(njudge)
njudge<-removeItems(njudge,nj_items)
nreact[1:100,]<-nreact[1:100,]+1 # increase tx group nreact
nreact<-minMax(nreact)
nreact<-removeItems(nreact,nr_items)
aware[101:200,]<-aware[101:200,]+1 # increase control group aware (now ~= to tx group)
aware<-minMax(aware)
aware<-removeItems(aware,aware_items)
desc[101:200,]<-desc[101:200,]+1 # increast ctrl group desc (now ~= to tx group)
desc<-minMax(desc)
desc<-removeItems(desc,desc_items)
# since we counter-balanced updating values, overall mean for groups should be the same
ffmq = data.frame(obs+desc+aware+njudge+nreact) # combine to create final ffmq data frame
gen_factor_data(obs_items,print_plot = TRUE)
