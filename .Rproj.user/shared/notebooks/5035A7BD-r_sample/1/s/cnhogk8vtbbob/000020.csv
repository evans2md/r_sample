"0","## survey data"
"0","# first survey is five facet mindfulness questionnaire, 39 items w 5 factors "
"0",""
"0","# we hypothesized that treatment (group1) would score higher than control (group2), so we'll set anchors for those as well. "
"0","# item responses range 1-5"
"0","m_ffmq_g1 <- 3.5 # mean ffmq score for group1"
"0","sd_ffmq_g1 <- 1 # sd ffmq score, group1"
"0",""
"0","m_ffmq_g2 <- 2.5"
"0","sd_ffmq_g2 <- 1"
"0",""
"0","# we'll generate data such that a factor analysis should reveal the factors by setting different anchors for each factor, and generative values for associated questions from those anchors"
"0","# factor: factor_name(factor_items)"
"0","# factor1: observing (1, 6, 11, 15, 20, 26, 31, 36)"
"0","obs_items = c(1,6,11,15,20,26,31,36) # we'll use later when generating data matrices"
"0","# factor2: describing (2, 7, 12R, 16R, 22R, 27, 32, 37) R = reverse scoring, can subtract upper limit to score (e.g 6; response:1, score:6-1=5)"
"0","desc_items = c(2,7,12,16,22,27,32,37)"
"0","# factor3: awareness (5R, 8R, 13R, 18R, 23R, 28R, 34R, 38R)"
"0","aware_items = c(5,8,13,18,23,28,34,38)"
"0","# factor4: nonjudging (3R, 10R, 14R, 17R, 25R, 30R, 35R, 39R)"
"0","nj_items = c(3,10,14,17,25,30,35,39)"
"0","# factor5: nonreactivity (4, 9, 19, 21, 24, 29, 33)"
"0","nr_items = c(4,9,19,21,24,29,33)"
"0",""
"0","# preallocate matrix for score"
"0","ffmq <- matrix(data=NA,nrow=n,ncol=39) # 39 survey items"
"0",""
"0","minMax <- function(m,floor=1,ceiling=5){"
"0","# function to set floor and ceiling values in a matrix"
"0","  m[m<floor]<-floor # set any values less than floor to floor"
"0","  m[m>ceiling]<-ceiling # same for ceiling"
"0","  return(m)"
"0","}"
"0",""
"0","removeItems <- function(m,factor_items){"
"0","# function to remove non-factor items from matrix"
"0","  m_vec <- to_vec(for(i in 1:39) # create vector for item placement,"
"0","    if(i %in% factor_items) 1 else 0)  # 1s in question index associated w factor, else NA"
"0","  "
"0","  for (ii in 1:length(m_vec)){ # go through binary vector representing factor items"
"0","    m[,ii]<-m[,ii]*m_vec[ii] #  if 0, drop column, if 1, keep column as is"
"0","  }"
"0","  return(m)"
"0","}"
"0",""
"0","gen_factor_data <-function(factor_items,print_plot=FALSE){"
"0","# function to generate ffmq factor data"
"0","# input: factor indicies"
"0","# output: 200x39 matrix of factor item responses (non-factor filled w 0s)"
"0","#   rows 1:100: group1"
"0","#   rows 101:200: group2"
"0","  m <- c(rnorm(length(group1),m_ffmq_g1,sd_ffmq_g1), # generate mean factor score for group1"
"0","           rnorm(length(group2),m_ffmq_g2,sd_ffmq_g2)) # and group2"
"0","  m = matrix(rnorm(39*n,m,1),n,39) # generate matrix using random means (static per participant) "
"0","  "
"0","  # using this method, we'll get some float values instead of integer"
"0","  mode(m)<-'integer' # set internal storage mode to integer (truncates)"
"0","  "
"0","  # we'll also run into values outside our range of 1-5"
"0","  m<-minMax(m)"
"0","  "
"0","  # good time to print some histograms to make sure distribution is as-expects"
"0","  if(print_plot==TRUE){"
"0","    hist(m[1:100,]) # first 100 rows e.g group1"
"0","    abline(v=m_ffmq_g1,col='red') # plot group1 population mean"
"0","    "
"0","    hist(obs[101:200,])# group2"
"0","    abline(v=m_ffmq_g2,col='red')"
"0","  }"
"0","  "
"0","  # get rid of non-factor columns"
"0","  m<-removeItems(m,factor_items)"
"0","  "
"0","  # my sample is slightly lower than defined means - due to changing data type to int instead of rounding, but overall looks good!"
"0","  # remove non-factor items"
"0","  return(m)"
"0","}"
"0",""
"0","# generate factor item responses"
"0","obs <- gen_factor_data(obs_items)"
"0","desc <- gen_factor_data(desc_items)"
"0","aware <- gen_factor_data(aware_items)"
"0","njudge <- gen_factor_data(nj_items)"
"0","nreact <- gen_factor_data(nr_items)"
"0",""
"0","# as is, all factors have the same means since they were generated w same population values"
"0","# let's assume some variability between factors, and for fun, say that the treatment"
"0","# works particularly well for non-judgement and non-react"
"0",""
"0","obs<-obs-1 # lower all obs scores by 1"
"0","obs<-minMax(obs) # reset floor/ceiling"
"0","obs<-removeItems(obs,obs_items) # 1 added to 0 values, remove non-factor columns"
"0",""
"0","njudge[1:100,]<-njudge[1:100,]+1 # increase treatment group non-judge by 1"
"0","njudge<-minMax(njudge)"
"0","njudge<-removeItems(njudge,nj_items)"
"0",""
"0","nreact[1:100,]<-nreact[1:100,]+1 # increase tx group nreact "
"0","nreact<-minMax(nreact)"
"0","nreact<-removeItems(nreact,nr_items)"
"0",""
"0","aware[101:200,]<-aware[101:200,]+1 # increase control group aware (now ~= to tx group)"
"0","aware<-minMax(aware)"
"0","aware<-removeItems(aware,aware_items)"
"0",""
"0","desc[101:200,]<-desc[101:200,]+1 # increast ctrl group desc (now ~= to tx group)"
"0","desc<-minMax(desc)"
"0","desc<-removeItems(desc,desc_items)"
"0","# since we counter-balanced updating values, overall mean for groups should be the same"
"0",""
"0","ffmq = data.frame(obs+desc+aware+njudge+nreact) # combine to create final ffmq data frame"
